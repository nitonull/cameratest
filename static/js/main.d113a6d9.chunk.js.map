{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","context","cameraPhoto","videoRef","React","createRef","state","dataUri","this","CameraPhoto","current","idealFacingMode","idealResolution","startCamera","then","console","log","catch","error","startCameraMaxResolution","getDataUri","sizeFactor","setState","stopCamera","onClick","facingMode","FACING_MODES","ENVIRONMENT","width","height","USER","takePhoto","ref","autoPlay","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAmGeA,E,YA/Fb,WAAaC,EAAOC,GAAU,IAAD,8BAC3B,4CAAMD,EAAOC,KACRC,YAAc,KACnB,EAAKC,SAAWC,IAAMC,YACtB,EAAKC,MAAQ,CACXC,QAAS,IALgB,E,iFAa3BC,KAAKN,YAAc,IAAIO,IAAYD,KAAKL,SAASO,W,kCAGtCC,EAAiBC,GAC5BJ,KAAKN,YAAYW,YAAYF,EAAiBC,GAC3CE,MAAK,WACJC,QAAQC,IAAI,0BAEbC,OAAM,SAACC,GACNH,QAAQG,MAAM,sBAAuBA,Q,+CAIjBP,GACxBH,KAAKN,YAAYiB,yBAAyBR,GACvCG,MAAK,WACJC,QAAQC,IAAI,0BAEbC,OAAM,SAACC,GACNH,QAAQG,MAAM,sBAAuBA,Q,kCAKzC,IAIIX,EAAUC,KAAKN,YAAYkB,WAJhB,CACbC,WAAY,IAIdb,KAAKc,SAAS,CAAEf,c,mCAIhBC,KAAKN,YAAYqB,aACdT,MAAK,WACJC,QAAQC,IAAI,qBAEbC,OAAM,SAACC,GACNH,QAAQC,IAAI,sBAAuBE,Q,+BAI9B,IAAD,OACR,OACE,6BACE,4BAAQM,QAAU,WAChB,IAAIC,EAAaC,eAAaC,YAE9B,EAAKd,YAAYY,EADK,CAAEG,MAAO,IAAKC,OAAQ,QAF9C,8DAMA,4BAAQL,QAAU,WAChB,IAAIC,EAAaC,eAAaI,KAC9B,EAAKjB,YAAYY,EAAY,MAF/B,8CAKA,4BAAQD,QAAU,WAChB,IAAIC,EAAaC,eAAaI,KAC9B,EAAKX,yBAAyBM,KAFhC,8CAKA,4BAAQD,QAAU,WAChB,EAAKO,cADP,gBAIA,4BAAQP,QAAU,WAChB,EAAKD,eADP,UAIA,2BACES,IAAKxB,KAAKL,SACV8B,SAAS,SAEX,yBACEC,IAAI,YACJC,IAAK3B,KAAKF,MAAMC,e,GAzFRH,IAAMgC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.d113a6d9.chunk.js","sourcesContent":["import React from 'react';\nimport CameraPhoto, { FACING_MODES } from 'jslib-html5-camera-photo';\n \nclass App extends React.Component {\n  constructor (props, context) {\n    super(props, context);\n    this.cameraPhoto = null;\n    this.videoRef = React.createRef();\n    this.state = {\n      dataUri: ''\n    }\n  }\n \n  componentDidMount () {\n    // We need to instantiate CameraPhoto inside componentDidMount because we\n    // need the refs.video to get the videoElement so the component has to be\n    // mounted.\n    this.cameraPhoto = new CameraPhoto(this.videoRef.current);\n  }\n \n  startCamera (idealFacingMode, idealResolution) {\n    this.cameraPhoto.startCamera(idealFacingMode, idealResolution)\n      .then(() => {\n        console.log('camera is started !');\n      })\n      .catch((error) => {\n        console.error('Camera not started!', error);\n      });\n  }\n \n  startCameraMaxResolution (idealFacingMode) {\n    this.cameraPhoto.startCameraMaxResolution(idealFacingMode)\n      .then(() => {\n        console.log('camera is started !');\n      })\n      .catch((error) => {\n        console.error('Camera not started!', error);\n      });\n  }\n \n  takePhoto () {\n    const config = {\n      sizeFactor: 1\n    };\n \n    let dataUri = this.cameraPhoto.getDataUri(config);\n    this.setState({ dataUri });\n  }\n \n  stopCamera () {\n    this.cameraPhoto.stopCamera()\n      .then(() => {\n        console.log('Camera stoped!');\n      })\n      .catch((error) => {\n        console.log('No camera to stop!:', error);\n      });\n  }\n \n  render () {\n    return (\n      <div>\n        <button onClick={ () => {\n          let facingMode = FACING_MODES.ENVIRONMENT;\n          let idealResolution = { width: 640, height: 480 };\n          this.startCamera(facingMode, idealResolution);\n        }}> Start environment facingMode resolution ideal 640 by 480 </button>\n \n        <button onClick={ () => {\n          let facingMode = FACING_MODES.USER;\n          this.startCamera(facingMode, {});\n        }}> Start user facingMode resolution default </button>\n \n        <button onClick={ () => {\n          let facingMode = FACING_MODES.USER;\n          this.startCameraMaxResolution(facingMode);\n        }}> Start user facingMode resolution maximum </button>\n \n        <button onClick={ () => {\n          this.takePhoto();\n        }}> Take photo </button>\n \n        <button onClick={ () => {\n          this.stopCamera();\n        }}> Stop </button>\n \n        <video\n          ref={this.videoRef}\n          autoPlay=\"true\"\n        />\n        <img\n          alt=\"imgCamera\"\n          src={this.state.dataUri}\n        />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}